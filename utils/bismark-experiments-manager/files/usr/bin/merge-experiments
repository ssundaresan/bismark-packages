#!/usr/bin/lua

-- BUILT-IN/EXTERNAL MODULES
require('io')
require('os')
require('uci')
require('bmlua.opkg')
opkg = bmlua.opkg
require('bmlua.path')
path = bmlua.path
require('bmlua.set')
set = bmlua.set
require('bmlua.uci')
require('nixio.fs')

local UCI_TRUE = bmlua.uci.UCI_TRUE
local UCI_FALSE = bmlua.uci.UCI_FALSE

------------------------------------------------------------------------------
-- GLOBALS
------------------------------------------------------------------------------
DEBUG = false
if DEBUG then
    UCI_DIR = 'etc_config'
else
    UCI_DIR = '/etc/config'
end
UCI_CONFIG = 'bismark-experiments'
EXPERIMENTS_CACHE = '/var/bismark-experiments'

------------------------------------------------------------------------------
-- PUBLIC FUNCTIONS
------------------------------------------------------------------------------
function initialize_local_uci()
    local local_fullpath = path.abspath(path.join(UCI_DIR, UCI_CONFIG))
    if not nixio.fs.stat(local_fullpath) then
        pdebug("UCI file %q does not exist; 'touch'ing.\n", local_fullpath)
        os.execute(string.format('touch %s', local_fullpath))
    end
    if DEBUG then
        return uci.cursor(path.dirname(local_fullpath))
    else
        return uci.cursor()
    end
end

function main(arg)
    local local_uci = initialize_local_uci()
    local experiments = set.Set()

    -- Download newest copies of the experiment files
    fetch_experiments()

    -- Merge all Experiments into the local configuration
    -- in alphabetical order by repository label.
    if nixio.fs.stat(EXPERIMENTS_CACHE) ~= nil then
        local available_lists = set.Set()
        for filename in nixio.fs.dir(EXPERIMENTS_CACHE) do
            available_lists:add(filename)
        end
        available_lists:intersection_update(opkg.get_package_lists())
        local available_lists_array = available_lists:to_array()
        table.sort(available_lists_array)
        for _, list_name in pairs(available_lists_array) do
            local remote_uci = uci.cursor(EXPERIMENTS_CACHE)
            print("Merging experiments from " .. list_name)
            experiments:update(merge_experiments(local_uci, remote_uci, list_name))
        end
    end

    -- Update the package list in case there are any new experiments that need
    -- packages added to the repository at the same time.
    os.execute("opkg update")

    -- Install and remove packages based on the new experiments configuration
    -- (Installed experiments may have changed the set packages they use.)
    os.execute("setup-and-teardown-experiments")

    -- Mark all experiments not in the remote experiment files as unavailable
    local experiments_config = local_uci:get_all(UCI_CONFIG)
    if experiments_config ~= nil then
        for name, experiment in pairs(experiments_config) do
            if not experiments:contains(name) then
                local_uci:set(UCI_CONFIG, name, 'available', UCI_FALSE)
            end
        end
        local_uci:save(UCI_CONFIG)
        local_uci:commit(UCI_CONFIG)
    end

    -- Remove all unavailable experiment entries that are not installed
    local experiments_config = local_uci:get_all(UCI_CONFIG)
    if experiments_config ~= nil then
        for name, experiment in pairs(experiments_config) do
            if not bmlua.uci.parse_bool(experiment.available)
                    and not bmlua.uci.parse_bool(experiment.installed) then
                local_uci:delete(UCI_CONFIG, name)
            end
        end
        local_uci:save(UCI_CONFIG)
        local_uci:commit(UCI_CONFIG)
    end
end

function fetch_experiments()
    nixio.fs.mkdir(EXPERIMENTS_CACHE)
    local downloaded = "/tmp/bismark-experiments-downloaded"
    for info in opkg.get_package_list_urls():iter() do
        nixio.fs.remove(downloaded)
        local experiments_url = path.join(info.url, "Experiments")
        local filename = path.join(EXPERIMENTS_CACHE, info.name)
        local return_code = os.execute("curl -s -f -z " .. filename
                                       .. " -o " .. downloaded
                                       .. " -w '%{http_code}'"
                                       .. " " .. experiments_url
                                       .. " | grep -e '^200$' -q")
        if return_code == 0 and nixio.fs.stat(downloaded) ~= nil then
            print("Updated experiments from " .. experiments_url)
            nixio.fs.rename(downloaded, filename)
        end
    end
end

function merge_experiments(local_uci, remote_uci, remote_filename)
    local local_experiments = local_uci:get_all(UCI_CONFIG)
    if local_experiments == nil then return nil end
    local remote_experiments = remote_uci:get_all(remote_filename)
    if remote_experiments == nil then
        nixio.fs.remove(path.join(EXPERIMENTS_CACHE, remote_filename))
        return nil
    end

    -- Insert and update experiments found in remote config file
    local available_experiments = set.Set()
    for ename, exp in pairs(remote_experiments) do
        if exp.description ~= nil
                and exp.display_name ~= nil
                and exp.package ~= nil then
            available_experiments:add(ename)
            if local_experiments[ename] == nil then
                local_uci:set(UCI_CONFIG, ename, 'experiment')
                if exp.installed ~= nil then
                    local_uci:set(UCI_CONFIG, ename, 'installed', exp.installed)
                else
                    local_uci:set(UCI_CONFIG, ename, 'installed', UCI_FALSE)
                end
                pdebug("Experiment %q added to local experiment set.\n", ename)
            else
                pdebug("Updating local experiment %q.\n", ename)
            end
            local_uci:set(UCI_CONFIG, ename, 'description', exp.description)
            local_uci:set(UCI_CONFIG, ename, 'display_name', exp.display_name)
            local_uci:delete(UCI_CONFIG, ename, 'package')
            local_uci:set(UCI_CONFIG, ename, 'package', exp.package)
            local_uci:set(UCI_CONFIG, ename, 'available', UCI_TRUE)
            if exp.conflicts ~= nil then
                local_uci:set(UCI_CONFIG, ename, 'conflicts', exp.conflicts)
            else
                local_uci:delete(UCI_CONFIG, ename, 'conflicts', {})
            end
            if exp.required ~= nil then
                local_uci:set(UCI_CONFIG, ename, 'required', exp.required)
                if exp.required == UCI_TRUE then
                    local_uci:set(UCI_CONFIG, ename, 'installed', UCI_TRUE)
                end
            else
                local_uci:set(UCI_CONFIG, ename, 'required', UCI_FALSE)
            end
            if exp.revoked ~= nil and exp.revoked == UCI_TRUE then
                local_uci:set(UCI_CONFIG, ename, 'installed', UCI_FALSE)
            end
        end
    end

    local_uci:save(UCI_CONFIG)
    local_uci:commit(UCI_CONFIG)
    return available_experiments
end

function pdebug(s, ...)
    if DEBUG ~= nil and DEBUG == true then
        io.stderr:write(string.format(s, unpack(arg)))
    end
end

------------------------------------------------------------------------------
-- TESTING STUFF
------------------------------------------------------------------------------
function init_be_remote_uci(uci_cursor, filename)
    -- initialize remote bismark-experiments config file with reasonable values
    local success = true
    local config_name = filename
    local sec_name = 'wifi_beacons'
    success = success and uci_cursor:set(config_name, sec_name, 'experiment')
    success = success and uci_cursor:set(config_name, sec_name,
            'display_name', 'Wifi Beacons')
    success = success and uci_cursor:set(config_name, sec_name, 'description',
            'Wifi Beacons collects data about the devices connected to your ' ..
            'BISmark router over wireless, as well as the presence of other ' ..
            'nearby wireless access points. <b>Wifi Beacons does not ' ..
            'collect the contents of your network traffic.</b>')
    success = success and uci_cursor:set(config_name, sec_name, 'package',
            {'wifi_beacons-tmpfs',
             'bismark-data-uploader'})
    if success then
        uci_cursor:commit(config_name)
    else
        print("failure")
    end
end

function init_be_local_uci(uci_cursor)
    -- initialize local bismark-experiments config file with reasonable values
    local success = true
    local config_name = 'bismark-experiments'
    local sec_name = 'wifi_beacons'
    init_be_remote_uci(uci_cursor, config_name)
    success = success and uci_cursor:set(config_name, sec_name,
            'installed', UCI_TRUE)
    success = success and uci_cursor:set(config_name, sec_name,
            'available', UCI_TRUE)
    if success then
        uci_cursor:commit(config_name)
    else
        print("failure")
    end
end

------------------------------------------------------------------------------
-- EXECUTE THIS SCRIPT
------------------------------------------------------------------------------
return main(arg)
